#+title: Config
#+author: cupkax
#+email: cupkax@protonmail.com
#+property: header-args:emacs-lisp :tangle yes :comments link
#+property: header-args:elisp :exports code
#+property: header-args:shell :tangle "setup.sh"
#+property: header-args :tangle no :results silent :eval no-export
#+options: coverpage:yes
#+startup: fold

* Doom Init
:PROPERTIES:
:header-args:emacs-lisp: :tangle no
:END:
This section controls the Doom modules tangled to =init.el=
#+name: init.el
#+attr_html: :collapsed t
#+begin_src emacs-lisp :tangle "init.el" :noweb no-export :noweb-prefix no :comments no
;;; init.el -*- lexical-binding: t; -*-
(doom! :input
       <<doom-input>>

       :completion
       <<doom-completion>>

       :ui
       <<doom-ui>>

       :editor
       <<doom-editor>>

       :emacs
       <<doom-emacs>>

       :term
       <<doom-term>>

       :checkers
       <<doom-checkers>>

       :tools
       <<doom-tools>>

       :os
       <<doom-os>>

       :lang
       <<doom-lang>>

       :email
       <<doom-email>>

       :app
       <<doom-app>>

       :config
       <<doom-config>>
       )
#+end_src
** Literate Config
#+name: doom-config
#+begin_src emacs-lisp
literate
(default +bindings +smartparens)
#+end_src

** Rest of the config
#+name: doom-completion
#+begin_src emacs-lisp
(corfu +orderless +dabbrev)  ; complete with cap(f), cape and a flying feather!
(vertico
 +childframe
 +icons)             ; the search engine of the future
#+end_src

#+name: doom-ui
#+begin_src emacs-lisp
;;deft                       ; notational velocity for Emacs
doom                         ; what makes DOOM look the way it does
doom-dashboard               ; a nifty splash screen for Emacs
doom-quit                    ; DOOM quit-message prompts when you quit Emacs
(emoji +unicode)         
hl-todo                      ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
(ligatures +extra)           ; ligatures and symbols to make your code pretty again
modeline                     ; snazzy, Atom-inspired modeline, plus API
nav-flash                    ; blink the current line after jumping
ophints                      ; highlight the region an operation acts on
(popup                       ; tame sudden yet inevitable temporary windows
 +all                        ; catch all popups that start with an asterix
 +defaults)                  ; default popup rules
treemacs                     ; a project drawer, like neotree but cooler
unicode                    ; extended unicode support for various languages
(vc-gutter +pretty)          ; vcs diff in the fringe
vi-tilde-fringe              ; fringe tildes to mark beyond EOB
zen                          ; distraction-free coding or writing
#+end_src

#+name: doom-editor
#+begin_src emacs-lisp
(evil +everywhere)           ; come to the dark side, we have cookies
file-templates               ; auto-snippets for empty files
fold                         ; (nigh) universal code folding
(format
 +onsave)                     ; automated prettiness
;;lispy                      ; vim for lisp, for people who don't like vim
;;parinfer                   ; turn lisp into python, sort of
snippets                     ; my elves. They type so I don't have to
word-wrap                  ; soft wrapping with language-aware indent
#+end_src

#+name: doom-emacs
#+begin_src emacs-lisp
(dired +icons)               ; making dired pretty [functional]
electric                     ; smarter, keyword-based electric-indent
(ibuffer +icons)             ; interactive buffer management
undo                         ; persistent, smarter undo for your inevitable mistakes
vc                           ; version-control and Emacs, sitting in a tree
#+end_src

#+name: doom-term
#+begin_src emacs-lisp
vterm                        ; the best terminal emulation in Emacs
#+end_src

#+name: doom-checkers
#+begin_src emacs-lisp
syntax                       ; tasing you for every semicolon you forget
grammar                      ; tasing grammar mistake every you make
#+end_src

#+name: doom-tools
#+begin_src emacs-lisp
biblio                       ; Writes a PhD for you (citation needed)
(eval +overlay)              ; run code, run (also, repls)
(lookup                      ; helps you navigate your code and documentation
 +dictionary                 ; dictionary/thesaurus is nice
 +docsets)                   ; ...or in Dash docsets locally
lsp                          ; Language Server Protocol
(magit                       ; a git porcelain for Emacs
 +forge)                     ; interface with git forges
make                         ; run make tasks from Emacs
pdf                          ; pdf enhancements
;;tree-sitter                  ; syntax and parsing, sitting in a tree...
upload                       ; map local to remote projects via ssh/ftp
#+end_src

#+name: doom-os
#+begin_src emacs-lisp
tty                          ; improve the terminal Emacs experience
#+end_src

** Language Support
#+name: doom-lang
#+begin_src emacs-lisp
data                         ; config/data formats
emacs-lisp                   ; drown in parentheses
ess               ; emacs speaks statistics
json                         ; At least it ain't XML
(latex                       ; writing papers in Emacs has never been so fun
 +lsp
 +latexmk                    ; what else would you use?
 +cdlatex                    ; quick maths symbols
 +fold)                      ; fold the clutter away nicities
markdown                     ; writing docs for people to ignore
(org                         ; organize your plain life in plain text
 +dragndrop                  ; drag & drop files/images into org buffers
 +hugo                     ; use Emacs for hugo blogging
 +noter                      ; enhanced PDF notetaking
 +jupyter                    ; ipython/jupyter support for babel
 +pandoc                     ; export-with-pandoc support
 +gnuplot                    ; who doesn't like pretty pictures
 +journal
 +noter
 ;;+pomodoro                 ; be fruitful with the tomato technique
 +present                    ; using org-mode for presentations
 +roam2)                     ; wander around notes
;;plantuml                   ; diagrams for confusing people more
;(python +lsp +pyright)       ; beautiful is better than ugly
(sh
 +lsp)                           ; she sells {ba,z,fi}sh shells on the C xor
(yaml
 +lsp)                         ; JSON, but readable
#+end_src

** Input
#+name: doom-input
#+begin_src emacs-lisp
;;bidi                       ; (tfel ot) thgir etirw uoy gnipleh
;;chinese
;;japanese
;;layout                     ; auie,ctsrnm is the superior home row
#+end_src

** Everything in Emacs
#+name: doom-email
#+begin_src emacs-lisp
(:if (executable-find "mu") (mu4e +org))
;;notmuch
;;(wanderlust +gmail)
#+end_src

#+name: doom-app
#+begin_src emacs-lisp
;;calendar                   ; A dated approach to timetabling
;;emms                       ; Multimedia in Emacs is music to my ears
;;everywhere                   ; *leave* Emacs!? You must be joking.
irc                          ; how neckbeards socialize
(rss +org)                   ; emacs as an RSS reader
;;twitter                    ; twitter client https://twitter.com/vnought
#+end_src

* Packages
#+begin_src emacs-lisp :tangle packages.el
;; -*- no-byte-compile: t; -*-

;; Very Large Files
(package! vlf
  :recipe (:host github :repo "emacs-straight/vlf" :files ("*.el")))

;; Autocorrect
(package! autocorrect :recipe (:local-repo "lisp/autocorrect"))

;; Auto activating snippets
(package! aas :recipe (:host github :repo "ymarco/auto-activating-snippets"))

;; Better page breaks
(package! page-break-lines :recipe (:host github :repo "purcell/page-break-lines"))

;; GPT
(package! gptel)

;; Org
(unpin! org)
(package! org-contrib
  ;; The `sr.ht' repo has been a bit flaky as of late.
  :recipe (:host github :repo "emacsmirror/org-contrib"
           :files ("lisp/*.el")))

;; Org Modern
(package! org-modern)

;; Emphasis Markers
(package! org-appear :recipe (:host github :repo "awth13/org-appear"))

;; Headlines
(package! org-ol-tree :recipe (:host github :repo "Townk/org-ol-tree"))

;; Transclusion
(package! org-transclusion :recipe (:host github :repo "nobiot/org-transclusion"))

;; Heading Graph
(package! org-graph-view :recipe (:host github :repo "alphapapa/org-graph-view"))

;; Pandoc Import
(package! org-pandoc-import :recipe
  (:local-repo "lisp/org-pandoc-import" :files ("*.el" "filters" "preprocessors")))

;; Org-Cite
(package! org-cite-csl-activate :recipe (:host github :repo "andras-simonyi/org-cite-csl-activate"))

;; Org Super Agenda
(package! org-super-agenda)

;; DOCT
(package! doct :recipe (:host github :repo "progfolio/doct"))

;; Better Code Blocks
(package! engrave-faces :recipe (:local-repo "lisp/engrave-faces"))

;; Paper-Mode
;(package! paper :recipe (:host github :repo "ymarco/paper-mode"
;                         :files ("*.el" ".so")
;                         :pre-build ("make")))

;; RSS Feeds
(package! ox-rss)

;; Systemd
(package! systemd)

;; Ebooks
(package! calibredb)
(package! nov)

#+end_src

* Doom Config
** Startup
*** Lexical Bindings
#+begin_src emacs-lisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
#+end_src
*** Better Defaults
#+begin_src emacs-lisp
(setq-default
 delete-by-moving-to-trash t                      ; Delete files to trash
 window-combination-resize t                      ; take new window space from all other windows (not just current)
 x-stretch-cursor t)                              ; Stretch cursor to the glyph width

(setq undo-limit 80000000                         ; Raise undo-limit to 80Mb
      evil-want-fine-undo t                       ; By default while in insert all changes are one big blob. Be more granular
      auto-save-default t                         ; Nobody likes to loose work, I certainly don't
      load-prefer-newer t
      password-cache-expiry nil
      scroll-margin 2
      display-time-default-load-average nil)

(display-time-mode 1)
(global-subword-mode 1)

;; mouse
(xterm-mouse-mode 1)
(defun track-mouse (e))
(setq mouse-sel-mode t)
(setq mouse-wheel-scroll-amount
      '(5
        ((shift) . hscroll)
        ((meta) . nil)
        ((control) . text-scale)))
(when (fboundp 'pixel-scroll-precision-mode)
  (pixel-scroll-precision-mode 1))

(general-auto-unbind-keys :off)
(remove-hook 'doom-after-init-modules-hook #'general-auto-unbind-keys)

#+end_src
*** Custom.el
#+begin_src emacs-lisp
(setq-default custom-file (expand-file-name ".custom.el" doom-user-dir))
(when (file-exists-p custom-file)
  (load custom-file))
#+end_src
*** =utf-8-unix= System
#+begin_src emacs-lisp
(prefer-coding-system 'utf-8-unix)
(set-default-coding-systems 'utf-8)

(defun cpkx/disable-macwin ()
  (let ((coding-str (symbol-name buffer-file-coding-system)))
    (when (string-match "-\\(?:dos\\|mac\\)$" coding-str)
      (set-buffer-file-coding-system 'unix))))

(add-hook 'find-file-hook 'cpkx/disable-macwin)

;; Set Default coding system for clipboard. Because apparently windows fucks it up somehow
(set-clipboard-coding-system 'utf-8)
#+end_src
** Visual Settings
*** Fonts
#+begin_src emacs-lisp
(setq doom-font (font-spec :family "CaskaydiaCove Nerd Font" :size 18)
      doom-big-font (font-spec :family "CaskaydiaCove Nerd Font" :size 22)
      doom-variable-pitch-font (font-spec :family "Overpass" :size 20)
      doom-unicode-font (font-spec :family "JuliaMono")
      doom-emoji-font (font-spec :family "Twitter Color Emoji") ; Just used by me
      doom-serif-font (font-spec :family "BlexMono Nerd Font" :size 17 :weight 'light))
#+end_src
*** Mixed Pitch
**** Basic Settings
#+begin_src emacs-lisp
(defvar mixed-pitch-modes '(org-mode LaTeX-mode markdown-mode gfm-mode Info-mode)
  "Modes that `mixed-pitch-mode' should be enabled in, but only after UI initialisation.")
(defun init-mixed-pitch-h ()
  "Hook `mixed-pitch-mode' into each mode in `mixed-pitch-modes'.
Also immediately enables `mixed-pitch-modes' if currently in one of the modes."
  (when (memq major-mode mixed-pitch-modes)
    (mixed-pitch-mode 1))
  (dolist (hook mixed-pitch-modes)
    (add-hook (intern (concat (symbol-name hook) "-hook")) #'mixed-pitch-mode)))
(add-hook 'doom-init-ui-hook #'init-mixed-pitch-h)

(autoload #'mixed-pitch-serif-mode "mixed-pitch"
  "Change the default face of the current buffer to a serifed variable pitch, while keeping some faces fixed pitch." t)

(setq! variable-pitch-serif-font (font-spec :family "Alegreya" :size 27))

(after! mixed-pitch
  (setq mixed-pitch-set-height t)
  (set-face-attribute 'variable-pitch-serif nil :font variable-pitch-serif-font)
  (defun mixed-pitch-serif-mode (&optional arg)
    "Change the default face of the current buffer to a serifed variable pitch, while keeping some faces fixed pitch."
    (interactive)
    (let ((mixed-pitch-face 'variable-pitch-serif))
      (mixed-pitch-mode (or arg 'toggle)))))
#+end_src
**** Variable Pitch Serif Font
#+begin_src emacs-lisp
(defface variable-pitch-serif
    '((t (:family "serif")))
    "A variable-pitch face with serifs."
    :group 'basic-faces)
(defcustom variable-pitch-serif-font (font-spec :family "serif")
  "The font face used for `variable-pitch-serif'."
  :group 'basic-faces
  :type '(restricted-sexp :tag "font-spec" :match-alternatives (fontp))
  :set (lambda (symbol value)
         (set-face-attribute 'variable-pitch-serif nil :font value)
         (set-default-toplevel-value symbol value)))
#+end_src
** Languages
*** General
**** File Templates
#+begin_src emacs-lisp
(set-file-template! "\\.tex$" :trigger "__" :mode 'latex-mode)
(set-file-template! "\\.org$" :trigger "__" :mode 'org-mode)
#+end_src
*** Org
**** System Config
A new diff mode to git in =~/.config/git/attributes=
#+begin_src fundamental
 *.org   diff=org
#+end_src
Adding a regex for it to ~/.config/git/config
#+begin_src gitconfig
[diff "org"]
  xfuncname = "^(\\*+ +.*)$"
#+end_src
